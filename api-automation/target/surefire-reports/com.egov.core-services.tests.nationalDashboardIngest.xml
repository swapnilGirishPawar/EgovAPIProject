<testsuite failures="0"
           name="com/egov/core-services/tests/nationalDashboardIngest.feature"
           skipped="0"
           tests="36"
           time="392.438015">
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest National dashboard data for PT"
             time="12.579748">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate data for PT"
             time="12.039625">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest future Date data for PT"
             time="10.725092">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest invalid date data for PT"
             time="11.244776">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest National dashboard data for Firenoc"
             time="10.800358">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate data for Firenoc"
             time="10.92448">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest Firenoc data for future date"
             time="10.702393">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest Firenoc data for invalid date"
             time="10.518848">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest National dashboard data for mCollect"
             time="10.700184">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate data for mCollect"
             time="11.270669">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest mCollect data for future date"
             time="10.525075">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest mCollect data for invalid date"
             time="10.484696">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest National dashboard data for WS"
             time="10.582237">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate data for WS"
             time="11.296324">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest WS data for future date"
             time="10.452887">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest WS data for invalid date"
             time="10.562813">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest National dashboard data for PGR"
             time="14.937342">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate data for PGR"
             time="11.012942">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest PGR data for future date"
             time="10.447023">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest PGR data for invalid date"
             time="10.633274">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest National dashboard data for TL"
             time="10.426327">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate data for TL"
             time="11.017091">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate data for TL"
             time="10.658876">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest invalid date data for TL"
             time="10.386349">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest National dashboard data for OBPS"
             time="10.68454">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate data for OBPS"
             time="11.144624">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest future date data for OBPS"
             time="10.415016">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest invalid date data for OBPS"
             time="10.513847">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest National dashboard Common Live data"
             time="10.53886">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest National dashboard Common OnBoarded data"
             time="10.452337">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate Live data"
             time="10.805585">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest duplicate OnBoarded data"
             time="10.871971">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest Live data for future date"
             time="10.439059">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest OnBoarded data for future date"
             time="10.703459">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest Live data for invalid date"
             time="10.468234">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed</system-out>
   </testcase>
   <testcase classname="com.egov.core-services.tests.nationalDashboardIngest"
             name="Ingest OnBoarded data for invalid date"
             time="10.471054">
      <system-out>* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPTError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestFirenocError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestmCollectError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestWSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestPGRError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestTLError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestOBPSError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* match ingestResponseBody == '#present' .................................. passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusLive ........................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-20' + (randomNumber(10)+12) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonSuccessfully') . passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.recordAlreadyExist . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = (randomNumber(18)+10) +'-0' + randomNumber(9)+'-210' + randomNumber(9) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.futureDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* def statusCommon = statusLive ........................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed
* def jsUtils = read('classpath:com/egov/utils/jsUtils.js') ............... passed
* def Thread = Java.type('java.lang.Thread') .............................. passed
* Thread.sleep(10000) ..................................................... passed
* def ingestConstants = read('../../core-services/constants/nationalDashboardIngest.yaml') . passed
* def commonConstants = read('../../common-services/constants/genericConstants.yaml') . passed
* def UsageCategory1 = mdmsStatePropertyTax.UsageCategory[0].code ......... passed
* def UsageCategory2 = mdmsStatePropertyTax.UsageCategory[1].code ......... passed
* def UsageCategory3 = mdmsStatePropertyTax.UsageCategory[2].code ......... passed
* def financialYear = commonConstants.parameters.dssFY[randomNumber(commonConstants.parameters.dssFY.length)] . passed
* def ward = ingestConstants.parameters.ward[randomNumber(ingestConstants.parameters.ward.length)] . passed
* def state = ingestConstants.parameters.state ............................ passed
* def region = ingestConstants.parameters.region .......................... passed
* def pt = ingestConstants.parameters.module[0] ........................... passed
* def tl = ingestConstants.parameters.module[1] ........................... passed
* def ws = ingestConstants.parameters.module[2] ........................... passed
* def obps = ingestConstants.parameters.module[3] ......................... passed
* def pgr = ingestConstants.parameters.module[4] .......................... passed
* def mcollect = ingestConstants.parameters.module[5] ..................... passed
* def firenoc = ingestConstants.parameters.module[6] ...................... passed
* def common = ingestConstants.parameters.module[7] ....................... passed
* def department1 = mdmsStatecommonMasters.Department[0].code ............. passed
* def department2 = mdmsStatecommonMasters.Department[1].code ............. passed
* def usageTypeFN = mdmsStateFireNocService.BuildingType[randomNumber(mdmsStateFireNocService.BuildingType.length)] . passed
* def provisional = mdmsStateFireNocService.ApplicationType[0].code ....... passed
* def new = mdmsStateFireNocService.ApplicationType[1].code ............... passed
* def paymentMode = ingestConstants.parameters.paymentMode[randomNumber(ingestConstants.parameters.paymentMode.length)] . passed
* def category = ingestConstants.parameters.category[randomNumber(ingestConstants.parameters.category.length)] . passed
* def receiptStatus = ingestConstants.parameters.receiptStatus[randomNumber(ingestConstants.parameters.receiptStatus.length)] . passed
* def challanStatus = ingestConstants.parameters.challanStatus[randomNumber(ingestConstants.parameters.challanStatus.length)] . passed
* def channelType = ingestConstants.parameters.channelType[randomNumber(ingestConstants.parameters.channelType.length)] . passed
* def connectionType = ingestConstants.parameters.connectionType[randomNumber(ingestConstants.parameters.connectionType.length)] . passed
* def usageTypeWS = ingestConstants.parameters.usageTypeWS[randomNumber(ingestConstants.parameters.usageTypeWS.length)] . passed
* def taxHeads = ingestConstants.parameters.taxHeads[randomNumber(ingestConstants.parameters.taxHeads.length)] . passed
* def wsduration = ingestConstants.parameters.wsduration[randomNumber(ingestConstants.parameters.wsduration.length)] . passed
* def meterType = ingestConstants.parameters.meterType[randomNumber(ingestConstants.parameters.meterType.length)] . passed
* def paymentChannelType = ingestConstants.parameters.paymentChannelType[randomNumber(ingestConstants.parameters.paymentChannelType.length)] . passed
* def serviceCode = msmsCityPgrServiceCodes[5].name ....................... passed
* def channelPGR = ingestConstants.parameters.channelPGR[randomNumber(ingestConstants.parameters.channelPGR.length)] . passed
* def statusPGR = ingestConstants.parameters.statusPGR[randomNumber(ingestConstants.parameters.statusPGR.length)] . passed
* def statusTL = ingestConstants.parameters.statusTL[randomNumber(ingestConstants.parameters.statusTL.length)] . passed
* def tradetype = ingestConstants.parameters.tradetype[randomNumber(ingestConstants.parameters.tradetype.length)] . passed
* def riskType = ingestConstants.parameters.riskType[randomNumber(ingestConstants.parameters.riskType.length)] . passed
* def occupancyType = ingestConstants.parameters.occupancyType[randomNumber(ingestConstants.parameters.occupancyType.length)] . passed
* def subOccupancyType = ingestConstants.parameters.subOccupancyType[randomNumber(ingestConstants.parameters.subOccupancyType.length)] . passed
* def statusLive = ingestConstants.parameters.statusLive .................. passed
* def statusOnBoarded = ingestConstants.parameters.statusOnBoarded ........ passed
* def date = randomNumber(10)+'-' + randomNumber(10)+'-21' + randomNumber(10) . passed
* def statusCommon = statusOnBoarded ...................................... passed
* call read('../../core-services/pretests/nationalDashboardIngestPretest.feature@ingestCommonError') . passed
* match ingestResponseBody == '#present' .................................. passed
* match ingestResponseBody.Errors[0].message == ingestConstants.errorMessages.invalidDate . passed</system-out>
   </testcase>
</testsuite>
